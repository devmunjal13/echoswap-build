{"version":3,"sources":["utils/erc20.ts","hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useTokenBalance.ts","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["getContract","provider","address","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","a","contract","methods","balanceOf","call","balance","useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","fetchBalances","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","BigNumber","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","TranslateString","useI18n","color","style","lineHeight","CakeWalletBalance","cakeBalance","useTokenBalance","setBalance","ethereum","fetchBalance","res","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","theme","mediaQueries","lg","Block","div","CardImage","img","Label","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","getBalanceNumber","getCakeAddress","eggPrice","usePriceCakeBusd","toNumber","reduce","accum","earning","pow","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","toFixed","id","disabled","length","onClick","fullWidth","UnlockButton","StyledCakeStats","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","cakeABI","supply","fetchTotalSupply","useTotalSupply","burnedBalance","deadbal","zerobal","plus","useBurnedBalance","farms","useFarms","circSupply","minus","cakeSupply","marketCap","times","eggPerBlock","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","options","chrome","Hero","Cards","BaseLayout","sm","Home","onSocialMediaClicked","url","window","open","focus","socialLinks","Page","as","padding","borderRadius","margin","FarmStakingCard"],"mappings":"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","file":"static/js/15.83c154ce.chunk.js","sourcesContent":["import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingECHO',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}{countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({earningsSum}) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const deadbal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      const zerobal = await cakeContract.methods.balanceOf('0x0000000000000000000000000000000000000000').call()\n\n     \n      setBalance(new BigNumber(deadbal).plus(new BigNumber(zerobal)))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingECHO',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n${({ theme }) => theme.mediaQueries.lg}{\n  background-image: url('/images/logo12.jpg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  background-size: 300px;\n  background-position-y:30px;\n}\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/logo.png\" alt=\"cake logo\" width={80} height={80} />\n        <Block>\n          <Label>{TranslateString(544, 'EGG to Harvest')}</Label>\n          <CakeHarvestBalance earningsSum={earningsSum} />\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'EGG in Wallet')}</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting EGG')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms();\n  const eggPrice = usePriceCakeBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = eggPrice.times(circSupply);\n\n  let eggPerBlock = 0;\n  if(farms && farms[0] && farms[0].eggPerBlock){\n    eggPerBlock = new BigNumber(farms[0].eggPerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'Egg Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New EGG/block')}</Text>\n          <Text bold fontSize=\"14px\">{eggPerBlock}</Text>\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue();\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(999, 'Total Value Locked (TVL)')}\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n            <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\n          {/* </Heading> */}\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'EchelonDAO'\n          }}\n          options={{\n            height: '300',\n            chrome: \"noheader, nofooter\",\n            width: \"400\"\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout, Button } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport { AiFillGithub, AiFillTwitterCircle, AiFillMediumCircle } from 'react-icons/ai'\n\nimport { FaTelegram, FaDiscord } from 'react-icons/fa'\n\nimport { BiWorld } from 'react-icons/bi'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\n\n\nconst Hero = styled.div`\n  align-items: center;\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/4-01.png'), url('/images/5-01.png');\n    background-position: left center, right center;\n    height: 265px;\n    padding-top: 0;\n    background-size: 250px;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  const onSocialMediaClicked = (url) => {\n    window.open(url, '_blank').focus()\n  }\n  const socialLinks = [\n    'https://github.com',\n    'https://echelondao.medium.com/echelon-dao-d7ab030ac02d',\n    'https://twitter.com/EchelonDAO',\n    'https://discord.gg/MwqeQn83xk',\n    'https://t.me/EchelonDAO',\n    'https://echelondao.com/',\n  ]\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" style={{ color: '#005596' }} size=\"xl\" mb=\"24px\" color=\"secondary\">\n          {TranslateString(576, 'EchoSwap')}\n        </Heading>\n        \n        <div>\n          {/* <Button\n            style={{ padding: 1, borderRadius: '100%', height: 50, width: 50, margin: 5 }}\n            onClick={() => {\n              onSocialMediaClicked(socialLinks[0])\n            }}\n          >\n            <AiFillGithub />\n          </Button> */}\n\n          <Button\n            style={{ padding: 1, borderRadius: '100%', height: 50, width: 50, margin: 5 }}\n            onClick={() => {\n              onSocialMediaClicked(socialLinks[1])\n            }}\n          >\n            <AiFillMediumCircle />\n          </Button>\n\n          <Button\n            style={{ padding: 1, borderRadius: '100%', height: 50, width: 50, margin: 5 }}\n            onClick={() => {\n              onSocialMediaClicked(socialLinks[2])\n            }}\n          >\n            <AiFillTwitterCircle />\n          </Button>\n\n          <Button\n            style={{ padding: 1, borderRadius: '100%', height: 50, width: 50, margin: 5 }}\n            onClick={() => {\n              onSocialMediaClicked(socialLinks[3])\n            }}\n          >\n            <FaDiscord />\n          </Button>\n\n          <Button\n            style={{ padding: 1, borderRadius: '100%', height: 50, width: 50, margin: 5 }}\n            onClick={() => {\n              onSocialMediaClicked(socialLinks[4])\n            }}\n          >\n            <FaTelegram />\n          </Button>\n\n          <Button\n            style={{ padding: 1, borderRadius: '100%', height: 50, width: 50, margin: 5 }}\n            onClick={() => {\n              onSocialMediaClicked(socialLinks[5])\n            }}\n          >\n            <BiWorld />\n          </Button>\n        </div>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <TwitterCard />\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}