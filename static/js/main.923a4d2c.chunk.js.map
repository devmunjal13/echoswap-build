{"version":3,"sources":["utils/web3.ts","state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","state/hooks.ts","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","state/actions.ts","hooks/useRefresh.ts","contexts/Localisation/translationsContext.ts","components/layout/Container.tsx","components/layout/Page.tsx","config/constants/types.ts","contexts/BlockContext.tsx","utils/multicall.ts","utils/addressHelpers.ts","config/constants/pools.ts","config/constants/contracts.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","App.tsx","state/index.ts","Providers.tsx","index.tsx"],"names":["RPC_URL","getRpcUrl","httpProvider","Web3","providers","HttpProvider","timeout","getWeb3","getContract","abi","address","contractOptions","eth","Contract","fetchFarms","a","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","console","log","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","BigNumber","div","pow","tokenSymbol","QuoteToken","BUSD","quoteTokenSymbol","tokenPriceVsQuote","USDT","lpTotalInQuoteToken","times","lpTokenPrice","lpTokenRatio","quoteTokenAmount","comparedTo","decimalTotal","plus","masterchefABI","pid","info","totalAllocPoint","eggPerBlock","allocPoint","_hex","poolWeight","toJSON","Number","toNumber","multiplier","toString","depositFeeBP","data","fetchFarmUserAllowances","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","ZERO","useFetchPublicData","useDispatch","slowRefresh","useRefresh","useEffect","useFarms","useSelector","useFarmFromPid","useFarmUser","usePools","fastRefresh","fetchPoolsUserDataAsync","pools","usePriceBnbBusd","usePriceCakeBusd","useTotalValue","bnbPrice","cakePrice","value","i","length","val","BNB","CAKE","nodes","process","getNodeUrl","randomIndex","random","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","interval","setInterval","prev","clearInterval","Provider","useContext","defaultTranslationState","translations","setTranslations","TranslationsContext","Container","styled","theme","mediaQueries","sm","Page","lg","PoolCategory","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","web3","getBlockNumber","blockNumber","current","multi","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","decodeFunctionResult","getCakeAddress","addresses","cake","chainId","masterChef","mulltiCall","getWbnbAddress","wbnb","getLotteryAddress","lottery","getLotteryTicketAddress","lotteryNFT","usdt","busd","nonBnbPools","poolsConfig","filter","p","stakingTokenName","bnbPools","nonMasterPools","sousId","masterChefContract","masterChefABI","fetchPoolsAllowance","stakingTokenAddress","contractAddress","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","masterPoolAmount","fetchUserPendingRewards","pendingRewards","pendingECHO","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","risk","lpSymbol","contracts","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","storedLangCode","localStorage","getItem","storedLang","getStoredLang","fetch","then","r","json","translationApiResponse","catch","e","error","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","light","useTheme","StyledThemeCopntext","config","label","icon","href","items","Menu","props","useWallet","connect","reset","cakePriceUsd","login","logout","currentLang","langs","setLang","links","priceLink","Wrapper","PageLoader","Home","lazy","Farms","Pools","NotFound","ComingSoon","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Global","fallback","path","exact","tokenMode","component","memo","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.923a4d2c.chunk.js","sourcesContent":["import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, httpProvider }\n","import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n\n      console.log(\"cccddccc\", calls)\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals\n      ] = await multicall(erc20, calls)\n\n      let tokenAmount;\n      let lpTotalInQuoteToken;\n      let tokenPriceVsQuote;\n      let lpTokenPrice;\n      if (farmConfig.isTokenOnly) {\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\n        if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\n          tokenPriceVsQuote = new BigNumber(1);\n        }\n        if (farmConfig.tokenSymbol === QuoteToken.USDT && farmConfig.quoteTokenSymbol === QuoteToken.USDT) {\n          tokenPriceVsQuote = new BigNumber(1);\n        }\n        else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n        lpTokenPrice = tokenPriceVsQuote.times(new BigNumber(10).pow(tokenDecimals)).div(new BigNumber(10).pow(quoteTokenDecimals))\n      } else {\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if (tokenAmount.comparedTo(0) > 0) {\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n        } else {\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n\n        const decimalTotal = new BigNumber(tokenDecimals).plus(new BigNumber(quoteTokenDecimals))\n        // console.log('tokenDecimals',Number(tokenDecimals))\n        // console.log('quoteTokenDecimals',Number(quoteTokenDecimals))\n\n        if (quoteTokenDecimals > 6) {\n          lpTokenPrice = lpTotalInQuoteToken.times(new BigNumber(10).pow(tokenDecimals - quoteTokenDecimals)).div(new BigNumber(lpTokenBalanceMC)).times(new BigNumber(10).pow((new BigNumber(decimalTotal)).div(new BigNumber(2))))\n        } else {\n          lpTokenPrice = lpTotalInQuoteToken.times(new BigNumber(10).pow(18)).div(new BigNumber(lpTokenBalanceMC)).times(new BigNumber(10).pow((new BigNumber(decimalTotal)).div(new BigNumber(2))))\n        }\n      }\n\n      const [info, totalAllocPoint, eggPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'echoPerBlock',\n        },\n      ])\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTokenPrice: Number(lpTokenPrice),\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        eggPerBlock: new BigNumber(eggPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'pendingECHO',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    // dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  // return ZERO\n  const pid = 1 // BUSD-BNB LP\n  const farm = useFarmFromPid(pid);\n  console.log(farm, \"farm\");\n\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  const pid = 0 // CAKE-BNB LP\n  const bnbPriceUSD = usePriceBnbBusd()\n  const farm = useFarmFromPid(pid);\n  // console.log(farm, \"farm\");\n  return new BigNumber(farm.lpTokenPrice)\n  // const pid = 0; // EGG-BUSD LP\n  // const farm = useFarmFromPid(pid);\n  // return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\n}\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms();\n  const bnbPrice = usePriceBnbBusd();\n  const cakePrice = usePriceCakeBusd();\n  let value = new BigNumber(0);\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val;\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\n      } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = (cakePrice.times(farm.lpTotalInQuoteToken));\n      } else {\n        val = (farm.lpTotalInQuoteToken);\n      }\n      value = value.plus(val);\n    }\n  }\n  return value;\n}","import random from 'lodash/random'\n\n// Array of available nodes to connect to\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[randomIndex]\n}\n\nexport default getNodeUrl\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from './pools'\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 992px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import styled from 'styled-components'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  subTitle?: string\n  description?: string\n  launchDate: string\n  launchTime: string\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  projectSiteUrl: string\n  currency: string\n  currencyAddress: string\n  tokenDecimals: number\n  releaseBlockNumber: number\n}\n\nexport enum QuoteToken {\n  'BNB' = 'BNB',\n  'CAKE' = 'ENTER',\n  'SYRUP' = 'SYRUP',\n  'BUSD' = 'BUSD',\n  'TWT' = 'TWT',\n  'UST' = 'UST',\n  'USDT' = \"USDT\"\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\n\nexport interface Address {\n  97?: string\n  56: string\n  80001?: string\n  137?: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol: QuoteToken\n  quoteTokenAdresses: Address\n  multiplier?: string\n  isTokenOnly?: boolean\n  isCommunity?: boolean\n  platfrom?: string\n  risk: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  image?: string\n  tokenName: string\n  stakingTokenName: QuoteToken\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  originalImage: string\n  previewImage: string\n  blurImage: string\n  sortOrder: number\n  bunnyId: number\n}\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\n\nconst pools: PoolConfig[] = [\n  // {\n  //   sousId: 0,\n  //   tokenName: 'CAKE',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   contractAddress: {\n  //     97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\n  //     56: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://pancakeswap.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '10',\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   tokenDecimals: 18,\n  // },\n  // {\n  //   sousId: 1,\n  //   tokenName: 'TWT',\n  //   stakingTokenName: QuoteToken.SYRUP,\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\n  //   contractAddress: {\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //     56: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://trustwallet.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '20',\n  //   sortOrder: 999,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  // },\n]\n\nexport default pools\n","export default {\n  cake: {\n    56: '0x6aaa14929d74b8533343c1a5b6e42443f59b6f6f',\n    97: '0xAa56B5a641F2B5dDF7e8f014463111974AD2F73D',\n    80001: \"0x056DCB5Fe7645dcA56641C79DB39eB531f2c1af8\",\n    137: \"0x55E29f7280565d6C392c192161de9e57b125165B\"\n  },\n  masterChef: {\n    56: '0xea14676617dce5cf81d59867dadcf2795b6b72ff',\n    97: '0x477556726F7C3532f19d8015617399669859fFd4',\n    80001: \"0xD37FD1CF4296540D0a7b412a4FD5F1609eF4BFe7\",\n    137: \"0x6E18e9c61b9A8d6D394f802D0766255f5e4B0899\"\n  },\n  usdt: {\n    56: \"\",\n    137: \"0xc2132D05D31c914a87C6611C10748AEb04B58e8F\"\n  },\n  wbnb: {\n    56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    97: '0xA73D61379627dB94f968C7bb4BD7fF5c07723Ec2',\n    80001: \"0x9c3c9283d3e44854697cd22d3faa240cfb032889\",\n    137: \"0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619\"\n  },\n  lottery: {\n    56: '',\n    97: '',\n  },\n  lotteryNFT: {\n    56: '',\n    97: '',\n  },\n  mulltiCall: {\n    56: '0x1ee38d535d541c55c9dae27b12edf090c608e6fb',\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\n    80001: \"0xBBEa47c3746912809c554b38b426f43ABA411eec\",\n    137: \"0xa1B2b503959aedD81512C37e9dce48164ec6a94d\"\n  },\n  busd: {\n    56: '0xe9e7cea3dedca5984780bafc599bd69add087d56',\n    97: '',\n    80001: \"0xe583769738b6dd4e7caf8451050d1948be717679\",\n    137: \"0xdAb529f40E671A1D4bF91361c21bf9f0C9712ab7\"\n  },\n}\n","import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingECHO',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingECHO('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingECHO', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst farms: FarmConfig[] = [\n\n  {\n    pid: 0,\n    risk: 5,\n    isTokenOnly: true,\n    lpSymbol: 'ECHO',\n    lpAddresses: {\n      97: '0xAa56B5a641F2B5dDF7e8f014463111974AD2F73D',\n      56: '0x4297Ec537AA6A024a95B7FDa29352c5bB8ec6c78',\n      80001: \"0x056DCB5Fe7645dcA56641C79DB39eB531f2c1af8\",\n      137: \"0xEbD80D63dCA312cBB703901025990c7AFbc10ca1\"\n    },\n    tokenSymbol: 'ECHO',\n    tokenAddresses: {\n      97: '0xAa56B5a641F2B5dDF7e8f014463111974AD2F73D',\n      56: '0x6aaa14929d74b8533343c1a5b6e42443f59b6f6f',\n      80001: \"0x056DCB5Fe7645dcA56641C79DB39eB531f2c1af8\",\n      137: \"0x55E29f7280565d6C392c192161de9e57b125165B\"\n    },\n    quoteTokenSymbol: QuoteToken.USDT,\n    quoteTokenAdresses: contracts.usdt,\n  },\n  \n  {\n    pid: 1,\n    risk: 5,\n    lpSymbol: 'ECHO-USDT LP',\n    lpAddresses: {\n      97: '0xAa56B5a641F2B5dDF7e8f014463111974AD2F73D',\n      56: '0x4297Ec537AA6A024a95B7FDa29352c5bB8ec6c78',\n      80001: \"0x056DCB5Fe7645dcA56641C79DB39eB531f2c1af8\",\n      137: \"0xEbD80D63dCA312cBB703901025990c7AFbc10ca1\"\n    },\n    tokenSymbol: 'USDT',\n    tokenAddresses: {\n      97: '0xAa56B5a641F2B5dDF7e8f014463111974AD2F73D',\n      56: '0x6aaa14929d74b8533343c1a5b6e42443f59b6f6f',\n      80001: \"0x056DCB5Fe7645dcA56641C79DB39eB531f2c1af8\",\n      137: \"0xc2132D05D31c914a87C6611C10748AEb04B58e8F\"\n    },\n    quoteTokenSymbol: QuoteToken.USDT,\n    quoteTokenAdresses: contracts.usdt,\n  },\n\n  {\n    pid: 2,\n    risk: 5,\n    lpSymbol: 'ECHO-WETH LP',\n    lpAddresses: {\n      97: '0xAa56B5a641F2B5dDF7e8f014463111974AD2F73D',\n      56: '0x4297Ec537AA6A024a95B7FDa29352c5bB8ec6c78',\n      80001: \"0x056DCB5Fe7645dcA56641C79DB39eB531f2c1af8\",\n      137: \"0x4bB196FF4Ef76031F2721218788591fb7a16DAf2\"\n    },\n    tokenSymbol: 'USDT',\n    tokenAddresses: {\n      97: '0xAa56B5a641F2B5dDF7e8f014463111974AD2F73D',\n      56: '0x6aaa14929d74b8533343c1a5b6e42443f59b6f6f',\n      80001: \"0x056DCB5Fe7645dcA56641C79DB39eB531f2c1af8\",\n      137: \"0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619\"\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n\n\n\n  // {\n  //   pid: 1,\n  //   risk: 5,\n  //   platfrom:\"PancakeSwap\",\n\n  //   lpSymbol: 'ECHO-BNB',\n  //   lpAddresses: {\n  //     97: '0xe3c51b170b0366a227d72dccdb0e070422ee85f7',\n  //     56: '0x4297Ec537AA6A024a95B7FDa29352c5bB8ec6c78', // ECHO-BNB LP\n  //   },\n  //   tokenSymbol: 'ECHO',\n  //   tokenAddresses: {\n  //     97: '0xA73D61379627dB94f968C7bb4BD7fF5c07723Ec2',\n  //     56: '0x6aaa14929d74b8533343c1a5b6e42443f59b6f6f',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BNB,\n  //   quoteTokenAdresses: contracts.wbnb,\n  // },\n\n\n\n\n\n  // {\n  //   pid: 2,\n  //   risk: 5,\n  //   lpSymbol: 'ECHO-BUSD',\n  //   platfrom:\"PancakeSwap\",\n  //   lpAddresses: {\n  //     97: '0x9c87298cF7055edD49fDa6989c933AE900CF6864',\n  //     56: '0x3551Ad2AF9363ff2311Eb94AA3282DA420681f97', // ECHO-BNB LP\n  //   },\n  //   tokenSymbol: 'ECHO',\n  //   tokenAddresses: {\n  //     97: '0xAa56B5a641F2B5dDF7e8f014463111974AD2F73D',\n  //     56: '0x6aaa14929d74b8533343c1a5b6e42443f59b6f6f',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n\n  // },\n\n\n\n  // {\n  //   pid: 3,\n  //   risk: 5,\n  //   lpSymbol: 'BNB-BUSD',\n  //   platfrom:\"PancakeSwap\",\n\n  //   lpAddresses: {\n  //     97: '0x9c87298cF7055edD49fDa6989c933AE900CF6864',\n  //     56: '0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16', // ECHO-BNB LP\n  //   },\n  //   tokenSymbol: 'BNB',\n  //   tokenAddresses: {\n  //     97: '0xAa56B5a641F2B5dDF7e8f014463111974AD2F73D',\n  //     56: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n\n  // },\n\n\n\n\n\n\n\n  // {\n  //   pid: 4,\n  //   risk: 5,\n  //   lpSymbol: 'ECHO-BNB',\n  //   platfrom:\"ApeSwap\",\n\n  //   lpAddresses: {\n  //     97: '0x9c87298cF7055edD49fDa6989c933AE900CF6864',\n  //     56: '0x83fecf82d5f83de0b71c6c6adfa015ceb4e783d4', // ECHO-BNB LP\n  //   },\n  //   tokenSymbol: 'ECHO',\n  //   tokenAddresses: {\n  //     97: '0xAa56B5a641F2B5dDF7e8f014463111974AD2F73D',\n  //     56: '0x6aaa14929d74b8533343c1a5b6e42443f59b6f6f',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BNB,\n  //   quoteTokenAdresses: contracts.wbnb,\n\n  // },\n\n\n\n  // {\n  //   pid: 5,\n  //   risk: 5,\n  //   lpSymbol: 'ECHO-BUSD',\n  //   platfrom:\"ApeSwap\",\n\n  //   lpAddresses: {\n  //     97: '0x9c87298cF7055edD49fDa6989c933AE900CF6864',\n  //     56: '0x8b034e644e7ec2f115b6035dde45bd80bb72972b', // ECHO-BNB LP\n  //   },\n  //   tokenSymbol: 'ECHO',\n  //   tokenAddresses: {\n  //     97: '0xAa56B5a641F2B5dDF7e8f014463111974AD2F73D',\n  //     56: '0x6aaa14929d74b8533343c1a5b6e42443f59b6f6f',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n\n  // },\n\n\n]\n\nexport default farms\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Kanit', sans-serif;\n  }\n  body {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n`\n\nexport default GlobalStyle\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  ZHCN,\n  ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then(r=>r.json())\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error(\"ERROR\");\n          console.error(e);\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from '@pancakeswap-libs/uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import { useContext } from 'react'\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\nimport { ThemeContext } from 'contexts/ThemeContext'\n\nconst useTheme = () => {\n  const { isDark, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeCopntext)\n  return { isDark, toggleTheme, theme }\n}\n\nexport default useTheme\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\n\nconst config: MenuEntry[] = [\n  {\n    label: 'Home',\n    icon: 'HomeIcon',\n    href: '/',\n  },\n  // {\n  //   label: 'Trade',\n  //   icon: 'TradeIcon',\n  //   items: [\n  //     {\n  //       label: 'Exchange',\n  //       href: 'https://exchange.echoswap.app/#/swap',\n  //     },\n  //     {\n  //       label: 'Liquidity',\n  //       href: 'https://exchange.echoswap.app/#/pool',\n  //     },\n  //   ],\n  // },\n  {\n    label: 'Farms',\n    icon: 'FarmIcon',\n    href: '/farms',\n  },\n  {\n    label: 'Pools',\n    icon: 'PoolIcon',\n    href: '/nests',\n  },\n  {\n    label: 'Voting',\n    href: 'https://snapshot.org/#/echelondao.eth/',\n    icon: 'NftIcon',\n  },\n\n  // {\n  //   label: 'Pools',\n  //   icon: 'PoolIcon',\n  //   href: '/pools',\n  // },\n  // {\n  //   label: 'Lottery',\n  //   icon: 'TicketIcon',\n  //   href: '/lottery',\n  // },\n  // {\n  //   label: 'NFT',\n  //   icon: 'NftIcon',\n  //   href: '/nft',\n  // },\n  {\n      label: 'IFO',\n      icon: 'GroupsIcon',\n      href: 'https://docs.google.com/forms/d/1HJCHwZ4XGDCktfNAYALEzHMkq2yTPs5X-cDUuOeTtcs/',\n  },\n\n\n \n  {\n    label: 'Info',\n    icon: 'InfoIcon',\n    items: [\n      // {\n      //   label: 'PancakeSwap',\n      //   href: 'https://exchange.pancakeswap.finance/#/swap?inputCurrency=0x6aaa14929d74b8533343c1a5b6e42443f59b6f6f',\n      // },\n      // {\n      //   label: 'ECHO token Address',\n      //   href: 'https://bscscan.com/address/0x6aaa14929D74b8533343C1A5b6e42443f59b6F6F',\n      // },\n      // {\n      //   label: 'LOCKED Liquidity',\n      //   href: 'https://cryptexlock.me/pair/0xC75D369eE2Baf51151462E39162BB530abb3487d',\n      // },\n      {\n        label: 'CHART',\n        href: 'https://coinmarketcap.com/currencies/echelon-dao/',\n      },\n      // {\n      //   label: 'Echelon Podcast',\n      //   href: 'https://anchor.fm/Echo-engage',\n      // },\n    ],\n  },\n\n  {\n    label: 'More',\n    icon: 'MoreIcon',\n    items: [\n      // {\n      //   label: 'Github',\n      //   href: 'https://github.com/goosedefi/',\n      // },\n      // {\n      //   label: 'Docs',\n      //   href: 'https://goosedefi.gitbook.io/goose-finance/',\n      // },\n      {\n        label: 'Gitbook',\n        href: 'https://echelon-dao.gitbook.io/echelon-dao/',\n      },\n    ],\n  },\n  \n  // {\n  //   label: 'Audit by Hacken',\n  //   icon: 'AuditIcon',\n  //   href: 'https://www.goosedefi.com/files/hackenAudit.pdf',\n  // },\n  // {\n  //   label: 'Audit by CertiK',\n  //   icon: 'AuditIcon',\n  //   href: 'https://certik.org/projects/goose-finance',\n  // },\n]\n\nexport default config\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { allLanguages } from 'config/localisation/languageCodes'\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\nimport useTheme from 'hooks/useTheme'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\nimport config from './config'\n\nconst Menu = (props) => {\n  const { account, connect, reset } = useWallet()\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\n  const { isDark, toggleTheme } = useTheme()\n  const cakePriceUsd = usePriceCakeBusd()\n\n  console.log(cakePriceUsd.toNumber(),\"count price\");\n  \n\n  return (\n    <UikitMenu\n      account={account}\n      login={connect}\n      logout={reset}\n      isDark={isDark}\n      toggleTheme={toggleTheme}\n      currentLang={selectedLanguage && selectedLanguage.code}\n      langs={allLanguages}\n      setLang={setSelectedLanguage}\n      cakePriceUsd={cakePriceUsd.toNumber()}\n      links={config}\n      priceLink=\"https://www.livecoinwatch.com/price/EchelonDAO-ECHO\"\n      {...props}\n    />\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from '@pancakeswap-libs/uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import React, { useEffect, Suspense, lazy } from 'react'\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useFetchPublicData } from 'state/hooks'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\nimport NftGlobalNotification from './views/Nft/components/NftGlobalNotification'\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\nconst Farms = lazy(() => import('./views/Farms'))\n// const Lottery = lazy(() => import('./views/Lottery'))\nconst Pools = lazy(() => import('./views/Pools'))\n// const Ifos = lazy(() => import('./views/Ifos'))\nconst NotFound = lazy(() => import('./views/NotFound'))\nconst ComingSoon = lazy(() => import('./views/ComingSoon'))\n// const Nft = lazy(() => import('./views/Nft'))\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n\n    // const list = await  document.getElementsByTagName(\"iframe\");\n    // list[0].style.display = \"none\";  \n    // console.log(list.length,\"list\");\n    \n  }, [account, connect])\n\n  useFetchPublicData()\n\n  return (\n    <Router>\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <Suspense fallback={<PageLoader />}>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>\n            <Route path=\"/farms\">\n              <Farms />\n            </Route>\n            <Route path=\"/nests\">\n              <Farms tokenMode />\n            </Route>\n            <Route path=\"/comingsoon\">\n              <ComingSoon />\n            </Route>\n            <Route path=\"/pools\">\n              <Pools />\n            </Route>\n            {/* <Route path=\"/lottery\"> */}\n            {/*  <Lottery /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/ifo\">\n             <Ifos />\n            </Route> */}\n            {/* <Route path=\"/nft\"> */}\n            {/*  <Nft /> */}\n            {/* </Route> */}\n            {/* Redirect */}\n            {/* <Route path=\"/staking\"> \n             <Redirect to=\"/pools\" />\n           </Route> */}\n            {/* <Route path=\"/syrup\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* 404 */}\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Menu>\n      {/* <NftGlobalNotification /> */}\n    </Router>\n  )\n}\n\nexport default React.memo(App)\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID);\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={chainId}\n            connectors={{\n              walletconnect: { rpcUrl },\n              bsc,\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}