{"version":3,"sources":["components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Tags.tsx","views/Pools/components/CardTitle.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","hooks/useStake.ts","views/Pools/components/Card.tsx","utils/erc20.ts","config/index.ts","components/layout/Flex.tsx","hooks/useUnstake.ts","views/Pools/components/Coming.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","hooks/useApprove.ts","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["StyledSpacer","styled","div","props","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","NoFeeTag","variant","outline","startIcon","CoreTag","CommunityTag","BinanceTag","CardTitle","isFinished","StyledInputWrapper","input","radii","default","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","TranslateString","useI18n","toLocaleString","onClick","BigNumber","times","toString","useSousStake","sousId","isUsingBnb","dispatch","useDispatch","useWallet","account","masterChefContract","useMasterchef","sousChefContract","useSousChef","handleStake","useCallback","amount","a","stake","sousStakeBnb","sousStake","updateUserStakedBalance","updateUserBalance","onStake","useStake","pid","txHash","fetchFarmUserDataAsync","console","info","Card","card","background","isActive","getContract","provider","address","Web3","eth","Contract","erc20","getTokenBalance","tokenAddress","userAddress","contract","methods","balanceOf","call","balance","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","FlexLayout","SYRUPIDS","useSousUnstake","isOldSyrup","includes","handleUnstake","unstake","sousEmegencyUnstake","sousUnstake","updateUserPendingReward","onUnstake","useUnstake","Balance","text","Label","textSubtle","DetailPlaceholder","Value","Footer","isDark","Coming","style","padding","role","src","width","height","alt","as","href","external","fullWidth","mb","flex","Wrapper","ExpandableSectionButton","expanded","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","StyledLinkExternal","LinkExternal","DetailsSection","isTokenOnly","bscScanAddress","removed","totalValueFormated","lpLabel","liquidityUrlPathParts","justifyContent","Flex","MultiplierTag","Tag","CardHeading","multiplier","platfrom","risk","farmImage","tokenSymbol","depositFee","alignItems","flexDirection","marginTop","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","displayBalance","useModal","onPresentDeposit","onPresentWithdraw","mr","BalanceAndCompound","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","toFixed","marginBottom","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","useFarmUser","allowance","lpAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","lpContract","onApprove","approve","tx","useApprove","handleApprove","error","textTransform","fontSize","pr","mt","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","Text","ApyCalculatorModal","apy","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","RainbowLight","keyframes","StyledCardAccent","FCard","Divider","borderColor","ExpandingWrapper","FarmCard","bnbPrice","showExpandableSection","setShowExpandableSection","toLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","CAKE","Number","undefined","maximumFractionDigits","farmAPY","minimumFractionDigits","display","CardActionsContainer","FarmTabButtons","stakedOnly","setStakedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","Link","to","Farms","tokenMode","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","fastRefresh","useRefresh","useEffect","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","cakeRewardPerYear","eggPerBlock","poolWeight","pow","comparedTo","backgroundColor","paddingTop","paddingBottom","paddingLeft","textAlign","Page","window","screen","float","clear","exact"],"mappings":"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","file":"static/js/8.9ebd3d71.chunk.js","sourcesContent":["import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'} outline startIcon={<VerifiedIcon />}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = () => (\n  <Tag variant='secondary' outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant='textSubtle' outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant='binance' outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\n","import styled from 'styled-components'\n\ninterface StyledTitleProps {\n  isFinished?: boolean\n}\n\nconst CardTitle = styled.div<StyledTitleProps>`\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'text']};\n  font-weight: 600;\n  font-size: 24px;\n  line-height: 1.1;\n  margin-bottom: 14px;\n`\n\nexport default CardTitle\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      {\n        depositFeeBP > 0 ?\n          <StyledMaxText>\n            {TranslateString(10001, 'Deposit Fee')}: {new BigNumber(value || 0).times(depositFeeBP/10000).toString()} {symbol}\n          </StyledMaxText>\n          :\n          null\n      }\n\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import styled from 'styled-components'\n\nconst Card = styled.div<{ isActive?: boolean; isFinished?: boolean }>`\n  background: ${(props) => props.theme.card.background};\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  border-radius: 32px;\n  display: flex;\n  color: ${({ isFinished, theme }) => theme.colors[isFinished ? 'textDisabled' : 'secondary']};\n  box-shadow: ${({ isActive }) =>\n    isActive\n      ? '0px 0px 0px 1px #0098A1, 0px 0px 4px 8px rgba(31, 199, 212, 0.4);'\n      : '0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05)'};\n  flex-direction: column;\n  position: relative;\n`\n\nexport default Card\n","import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 1\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Image, Button } from '@pancakeswap-libs/uikit'\nimport { CommunityTag } from 'components/Tags'\nimport useI18n from 'hooks/useI18n'\nimport Card from './Card'\nimport CardTitle from './CardTitle'\n\nconst Balance = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  font-size: 40px;\n  font-weight: 600;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n  margin-bottom: 16px;\n`\n\nconst DetailPlaceholder = styled.div`\n  display: flex;\n  font-size: 14px;\n`\nconst Value = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  font-size: 14px;\n`\n\nconst Footer = styled.div`\n  border-top: 1px solid ${({ theme }) => (theme.isDark ? '#524B63' : '#E9EAEB')};\n  padding: 24px;\n`\nconst Coming: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Card>\n      <div style={{ padding: '24px' }}>\n        <CardTitle>\n          {TranslateString(414, 'Your Project?')}{' '}\n          <span role=\"img\" aria-label=\"eyes\">\n            👀\n          </span>\n        </CardTitle>\n        <Image src=\"/images/bunny-question.svg\" width={64} height={64} alt=\"Your project here\" />\n        <Balance>???</Balance>\n        <Label>{TranslateString(416, 'Create a pool for your token')}</Label>\n        <Button\n          variant=\"secondary\"\n          as=\"a\"\n          href=\"https://docs.google.com/forms/d/e/1FAIpQLSekxfSHHTEdKwO2dDrG2A-hG6h7LQPszWHzyGSP4viGkiRJhA/viewform?usp=sf_link\"\n          external\n          fullWidth\n          mb=\"16px\"\n        >\n          {TranslateString(418, 'Apply Now')}\n        </Button>\n        <DetailPlaceholder>\n          <div style={{ flex: 1 }}>{TranslateString(736, 'APR')}:</div>\n          <Value>??</Value>\n        </DetailPlaceholder>\n        <DetailPlaceholder>\n          <div style={{ flex: 1 }}>\n            <span role=\"img\" aria-label=\"syrup\">\n              {' '}\n            </span>\n            {TranslateString(384, 'Your Stake')}:\n          </div>\n          <Value>??? ECHO</Value>\n        </DetailPlaceholder>\n      </div>\n      <Footer>\n        <CommunityTag />\n      </Footer>\n    </Card>\n  )\n}\n\nexport default Coming\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? 'Hide' : 'Details'}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'BNB' : quoteTokenAdresses[chainId]\n  const secondPart = tokenAddresses[chainId]\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from '@pancakeswap-libs/uikit'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { Address } from 'config/constants/types'\n\nexport interface ExpandableSectionProps {\n  isTokenOnly?: boolean\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  isTokenOnly,\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(316, 'Stake')}:</Text>\n        <StyledLinkExternal href={\n          isTokenOnly ?\n            `https://polygonscan.com/token/${tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n            :\n          `https://polygonscan.com/token/${liquidityUrlPathParts}`\n        }>\n          {lpLabel}\n        </StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {TranslateString(356, 'View on Polygonscan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  risk?: number\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n  platfrom?:string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  risk,\n  platfrom,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={60} height={60} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n          {/* {isCommunityFarm ? <CommunityTag /> : <CoreTag />} */}\n          {/* <RiskTag risk={risk} /> */}\n          <MultiplierTag >\n            {' '}\n            <span >{multiplier}</span>\n          </MultiplierTag>\n\n          \n        </Flex>\n     \n\n        <Flex justifyContent=\"center\" style={{marginTop:10}}>\n        {platfrom? <Tag variant='secondary'>\n        \n        <span >{platfrom}</span>\n      </Tag>:null}\n        </Flex>\n        \n      </Flex>\n    \n   \n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toFixed(4)\n\n  return (\n    <Flex mb='8px' justifyContent='space-between' alignItems='center'>\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        {pid === 12 ?\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            size='sm'\n            variant='secondary'\n            marginBottom='15px'\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString())\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n          : null}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if(isTokenOnly){\n      return getContract(ethereum as provider, tokenAddress);\n    }\n    return getContract(ethereum as provider, lpAddress);\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" style={{color:\"#5677ba\"}} fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          ECHO\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" >\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" style={{color:\"#5677ba\"}} fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\nimport { Address } from 'config/constants/types'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(999, 'ECHO per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          999,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { CalculateIcon, IconButton, useModal } from '@pancakeswap-libs/uikit'\nimport { Address } from 'config/constants/types'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: BigNumber\n  quoteTokenAdresses?: Address\n  quoteTokenSymbol?: string\n  tokenAddresses: Address\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({\n  lpLabel,\n  quoteTokenAdresses,\n  quoteTokenSymbol,\n  tokenAddresses,\n  cakePrice,\n  apy,\n}) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal\n      lpLabel={lpLabel}\n      quoteTokenAdresses={quoteTokenAdresses}\n      quoteTokenSymbol={quoteTokenSymbol}\n      tokenAddresses={tokenAddresses}\n      cakePrice={cakePrice}\n      apy={apy}\n    />,\n  )\n\n  return (\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\n      <CalculateIcon />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(45deg,\n  rgba(255, 0, 0, 1) 0%,\n  rgba(255, 154, 0, 1) 10%,\n  rgba(208, 222, 33, 1) 20%,\n  rgba(79, 220, 74, 1) 30%,\n  rgba(63, 218, 216, 1) 40%,\n  rgba(47, 201, 226, 1) 50%,\n  rgba(28, 127, 238, 1) 60%,\n  rgba(95, 21, 242, 1) 70%,\n  rgba(186, 12, 248, 1) 80%,\n  rgba(251, 7, 217, 1) 90%,\n  rgba(255, 0, 0, 1) 100%);\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.lpSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'ECHO'\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses, risk } = farm\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'ECHO' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        risk={risk}\n        depositFee={farm.depositFeeBP}\n        platfrom={farm.platfrom}\n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent='space-between' alignItems='center'>\n          <Text>{TranslateString(352, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton\n                  lpLabel={lpLabel}\n                  quoteTokenAdresses={quoteTokenAdresses}\n                  quoteTokenSymbol={quoteTokenSymbol}\n                  tokenAddresses={tokenAddresses}\n                  cakePrice={cakePrice}\n                  apy={farm.apy}\n                />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent='space-between'>\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <Flex justifyContent='space-between'>\n        <Text style={{ fontSize: '24px' }}>{TranslateString(10001, 'Deposit Fee')}:</Text>\n        <Text bold style={{ fontSize: '24px' }}>{(farm.depositFeeBP / 100)}%</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          isTokenOnly={farm.isTokenOnly}\n          bscScanAddress={\n            farm.isTokenOnly ?\n              `https://polygonscan.com/token/${farm.tokenAddresses[process.env.REACT_APP_CHAIN_ID]}`\n              :\n              `https://polygonscan.com/token/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`\n          }\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          quoteTokenAdresses={quoteTokenAdresses}\n          quoteTokenSymbol={quoteTokenSymbol}\n          tokenAddresses={tokenAddresses}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = ({ stakedOnly, setStakedOnly }) => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ToggleWrapper>\n        <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} />\n        <Text> {TranslateString(699, 'Staked only')}</Text>\n      </ToggleWrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(698, 'Active')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(700, 'Inactive')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 32px;\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-right: 32px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR,  } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\nimport Coming from \"../Pools/components/Coming\"\n\nexport interface FarmsProps {\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = ({tokenMode}) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  \n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1)\n          .times(new BigNumber(farm.poolWeight))\n          .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear)\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice)\n        }\n\n        if (totalValue.comparedTo(0) > 0) {\n          apy = apy.div(totalValue)\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum],\n  )\n\n  return (\n    <div>\n      <Heading style={{ color:\"#FFFFFF\", backgroundColor: '#5677ba', paddingTop: '40px', paddingBottom: '40px', width: '100%', paddingLeft:\"10px\", fontSize:\"4rem\", textAlign:\"center\" }}>\n        {tokenMode ? 'Pools' : 'Farms'}\n      </Heading>\n      <Page>\n        <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n          {tokenMode\n            ? TranslateString(10002, 'Stake tokens to earn ')\n            : \"Stake LP tokens to earn ECHO\"}\n          \n        </Heading>\n        {/* <Heading as=\"h2\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center', color:\"#5677ba\" }}>\n        Deposit Fee will be used to buyback ECHO\n        </Heading> */}\n        {window.screen.width > 900 && !tokenMode && (\n          <Heading style={{ width: '300px', float: 'right', clear: 'left', display: 'inline', marginTop: '-120px' }}>\n            <img src=\"/images/2-01.png\" alt=\"SYRUP POOL icon\" width={500} height={200} />\n          </Heading>\n        )}\n        {window.screen.width > 900 && tokenMode && (\n          <Heading style={{ width: '300px', float: 'right', clear: 'left', display: 'inline', marginTop: '-120px' }}>\n            <img src=\"/images/3-01.png\" alt=\"SYRUP POOL icon\" width={500} height={200} />\n          </Heading>\n        )}\n        <FarmTabButtons stakedOnly={stakedOnly} setStakedOnly={setStakedOnly} />\n        \n        <div style={{ marginTop: '30px' }}>\n          <Divider />\n\n          <FlexLayout>\n            \n            <Route exact path={`${path}`}>\n              {tokenMode?<Coming />:null}\n              {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n\n            </Route>\n            <Route exact path={`${path}/history`}>\n              {farmsList(inactiveFarms, true)}\n\n            </Route>\n          </FlexLayout>\n        </div>\n        {/* <Image src=\"/images/egg/8.png\" alt=\"illustration\" width={1352} height={587} responsive /> */}\n      </Page>\n    </div>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}